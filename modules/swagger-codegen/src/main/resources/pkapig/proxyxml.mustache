<ProxyEndpoint name="{{{baseName}}}proxy">
<Description>APIProxyTemplate</Description>
    <FaultRules>
     <FaultRule name="faultRules">
           <Step>
				<Name>tp_GenericFaultHandling</Name>
			</Step>
			<Step>
				<Name>tp_SetJSONErrorMessage</Name>
			</Step>
     </FaultRule>
    </FaultRules>

	<!-- Generic Fault Rules defined below. -->
	<PreFlow name="PreFlow">
	<Request>
          <Step>
              <Name>tp_AssignMessage.InitializeConfigurations</Name>
          </Step>
          <Step>
               <FaultRules />
               <Name>tp_SpikeArrest.TrafficSpikeProtection</Name>
           </Step>
  <!-- Validate Mandatory Header Elements : Begin (Common To All Flows) -->
			<Step>
				<FaultRules />
				<Name>tp_SetMandatoryElementsHeader</Name>
			</Step>
			<Step>
				<FaultRules />
				<Name>tp_ValidateMandatoryElements</Name>
			</Step>
			<Step>
                 <Condition>(ValidationError = "true")</Condition>
                 <Name>tp_RaiseFault</Name>
            </Step>
  <!-- Security policies BEGINING -->
			<Step>
			    <FaultRules />
			    <Name>tp_JSONThreatProtection.DoSAEvaluation</Name>
			     <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Name>tp_XMLThreatProtection.DoSAEvaluation</Name>
			    <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Name>tp_JS.SQLInjectionEvaluation</Name>
			    <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Name>tp_JS.ServerSideIncludeInjectionEvaluation</Name>
			    <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Name>tp_JS.JavaScriptInjectionEvaluation</Name>
			    <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Name>tp_JS.XPathSyntaxInjectionEvaluation</Name>
			    <Condition>(request.content.length > 0)</Condition>
			</Step>
			<Step>
			    <FaultRules />
			    <Condition>threatProtectionEvaluationStatus == "failed"</Condition>
			    <Name>tp_RaiseFault.RedirectToDefaultFaultHandling</Name>
			</Step>
	<!-- Security policies END -->
	<!-- AccessToken verification START -->
	         <Step>
				<FaultRules />
				<Name>tp_Extract_AuthHeader</Name>
			</Step>
			<Step>
				<FaultRules />
				<Name>tp_JS_CheckATBearerCase</Name>
			</Step>
			<Step>
				<FaultRules />
				<Name>tp_OAuthV2.VerifyAccessToken</Name>
			</Step>
			<Step>
				<FaultRules />
				<Name>tp_VerifyAPIKey</Name>
			</Step>
	<!-- AccessToken verification END -->
	<!-- Scope Check START -->
	        <Step>
                <Name>ScopeVerification</Name>
            </Step>	
			<Step>
				<Condition>isScopeError == true</Condition>
				<Name>tp_RaiseFault</Name>
			</Step>
	<!-- Scope Check END -->
	<!-- Rate limit check START -->
	<Step>
				<Name>tp_JS.SetRateLimitingValues</Name>
			</Step>
			<Step>
				<Name>tp_Quota.RateLimitingQuotaCount</Name>
			</Step>
			<Step>
				<Name>tp_Quota.RateLimitingTransactionCount</Name>
			</Step>
	 <!-- Rate Limit Check END-->
	<!-- Request  info Logging START-->
			<Step>
				<Name>tp_JS.ExtractHeadersFromRequest</Name>
			</Step>
			<Step>
				<Name>tp_MessageLogging.Logger</Name>
			</Step>
	 <!-- Request  info Logging END-->
	</Request>
	<Response/>
  </PreFlow>
  <Flows>
  {{#operations}}
  {{#operation}}
  <Flow name="{{{operationId}}}">
  <Description>{{{summary}}}</Description>
    <Request>
        <Step><Name>tp_JS.GetFlowName</Name></Step>
    </Request>
    <Response>
    </Response>
    <Condition>(proxy.pathsuffix MatchesPath &quot;{{{path}}}&quot;) and (request.verb = &quot;{{httpMethod}}&quot;)</Condition>
  </Flow>
  {{/operation}}
  {{/operations}}
</Flows>
  <HTTPProxyConnection>
    <!-- Define a URI to create the path to this proxy. -->	
    <BasePath>{{{basePath}}}</BasePath>  
    <!-- Listen on HTTP URL defined in the VirtualHost named 'default'. -->	
    <VirtualHost>default</VirtualHost>
  </HTTPProxyConnection>
  <RouteRule name="Route">
    <!-- No route. This API proxy is an echo service. -->
  </RouteRule>
</ProxyEndpoint>
